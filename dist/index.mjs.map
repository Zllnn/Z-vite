{"version":3,"sources":["../node_modules/.pnpm/tsup@5.12.9_typescript@4.9.5/node_modules/tsup/assets/esm_shims.js","../src/node/cli.ts","../src/node/server/index.ts","../src/node/optimizer/index.ts","../src/node/constants.ts","../src/node/optimizer/scanPlugin.ts","../src/node/optimizer/preBundlePlugin.ts","../src/node/utils.ts","../src/node/server/middlewares/transform.ts","../src/node/ModuleGraph.ts","../src/node/pluginContainer.ts","../src/node/plugins/esbuild.ts","../src/node/plugins/resolve.ts","../src/node/plugins/importAnalysis.ts","../src/node/plugins/css.ts","../src/node/plugins/assets.ts","../src/node/plugins/clientInject.ts","../src/node/plugins/react-hmr.ts","../src/node/plugins/index.ts","../src/node/server/middlewares/indexHtml.ts","../src/node/server/middlewares/static.ts","../src/node/ws.ts","../src/node/hmr.ts"],"sourcesContent":["// Shim globals in esm bundle\nimport { fileURLToPath } from 'url'\nimport path from 'path'\n\nconst getFilename = () => fileURLToPath(import.meta.url)\nconst getDirname = () => path.dirname(getFilename())\n\nexport const __dirname = /* @__PURE__ */ getDirname()\nexport const __filename = /* @__PURE__ */ getFilename()\n","import cac from \"cac\";\r\nimport { startDevServer } from \"./server\";\r\n\r\nconst cli = cac();\r\n\r\ncli\r\n  .command(\"[root]\", \"Run the development server\")\r\n  .alias(\"serve\")\r\n  .alias(\"dev\")\r\n  .action(async () => {\r\n    await startDevServer();\r\n  });\r\n\r\ncli.command(\"build\", \"Build the app for production\").action(() => {});\r\n\r\ncli.help();\r\n\r\ncli.parse();\r\n","import connect from \"connect\";\r\nimport { optimize } from \"../optimizer/index\";\r\nimport { blue, green } from \"picocolors\";\r\nimport { transformMiddleware } from \"./middlewares/transform\";\r\nimport { ModuleGraph } from \"../ModuleGraph\";\r\nimport { createPluginContainer, PluginContainer } from \"../pluginContainer\";\r\nimport { resolvePlugins } from \"../plugins\";\r\nimport { indexHtmlMiddware } from \"./middlewares/indexHtml\";\r\nimport { staticMiddleware } from \"./middlewares/static\";\r\nimport { createWebSocketServer } from \"../ws\";\r\nimport chokidar, { FSWatcher } from \"chokidar\";\r\nimport { bindingHMREvents } from \"../hmr\";\r\nimport { Plugin } from \"../plugin\";\r\nimport { normalizePath } from \"../utils\";\r\n\r\nexport interface ServerContext {\r\n  root: string;\r\n  pluginContainer: PluginContainer;\r\n  app: connect.Server;\r\n  plugins: Plugin[];\r\n  moduleGraph: ModuleGraph;\r\n  ws: { send: (data: any) => void; close: () => void };\r\n  watcher: FSWatcher;\r\n}\r\n\r\nexport async function startDevServer() {\r\n  const app = connect();\r\n  const root = process.cwd();\r\n  const startTime = Date.now();\r\n  const plugins = resolvePlugins();\r\n  const moduleGraph = new ModuleGraph((url) => pluginContainer.resolveId(url));\r\n  const pluginContainer = createPluginContainer(plugins);\r\n  const watcher = chokidar.watch(root, {\r\n    ignored: [\"**/node_modules/**\", \"**/.git/**\"],\r\n    ignoreInitial: true,\r\n  });\r\n  // WebSocket ÂØπË±°\r\n  const ws = createWebSocketServer(app);\r\n  // // ÂºÄÂèëÊúçÂä°Âô®‰∏ä‰∏ãÊñá\r\n  const serverContext: ServerContext = {\r\n    root: normalizePath(process.cwd()),\r\n    app,\r\n    pluginContainer,\r\n    plugins,\r\n    moduleGraph,\r\n    ws,\r\n    watcher,\r\n  };\r\n  bindingHMREvents(serverContext);\r\n  for (const plugin of plugins) {\r\n    if (plugin.configureServer) {\r\n      await plugin.configureServer(serverContext);\r\n    }\r\n  }\r\n\r\n  // // Ê†∏ÂøÉÁºñËØëÈÄªËæë\r\n  app.use(transformMiddleware(serverContext));\r\n\r\n  // ÂÖ•Âè£ HTML ËµÑÊ∫ê\r\n  app.use(indexHtmlMiddware(serverContext));\r\n\r\n  // ÈùôÊÄÅËµÑÊ∫ê\r\n  app.use(staticMiddleware(serverContext.root));\r\n\r\n  app.listen(3000, async () => {\r\n    await optimize(root);   //‰æùËµñÈ¢ÑÊûÑÂª∫\r\n    console.log(\r\n      green(\"üöÄ No-Bundle ÊúçÂä°Â∑≤ÁªèÊàêÂäüÂêØÂä®!\"),\r\n      `ËÄóÊó∂: ${Date.now() - startTime}ms`\r\n    );\r\n    console.log(`> Êú¨Âú∞ËÆøÈóÆË∑ØÂæÑ: ${blue(\"http://localhost:3000\")}`);\r\n  });\r\n}\r\n","import { build } from \"esbuild\";\r\nimport { green } from \"picocolors\";\r\nimport path from \"path\";\r\nimport { scanPlugin } from \"./scanPlugin\";\r\nimport { preBundlePlugin } from \"./preBundlePlugin\";\r\nimport { PRE_BUNDLE_DIR } from \"../constants\";\r\n\r\nexport async function optimize(root: string) {\r\n  // 1. Á°ÆÂÆöÂÖ•Âè£\r\n  const entry = path.resolve(root, \"src/main.tsx\");\r\n\r\n  // 2. ‰ªéÂÖ•Âè£Â§ÑÊâ´Êèè‰æùËµñ\r\n  const deps = new Set<string>();\r\n  await build({\r\n    entryPoints: [entry],\r\n    bundle: true,\r\n    write: false,\r\n    plugins: [scanPlugin(deps)],\r\n  });\r\n  console.log(\r\n    `${green(\"ÈúÄË¶ÅÈ¢ÑÊûÑÂª∫ÁöÑ‰æùËµñ\")}:\\n${[...deps]\r\n      .map(green)\r\n      .map((item) => `  ${item}`)\r\n      .join(\"\\n\")}\\n`\r\n  );\r\n\r\n  // 3. È¢ÑÊûÑÂª∫‰æùËµñ\r\n  await build({\r\n    entryPoints: [...deps],\r\n    write: true,\r\n    bundle: true,\r\n    format: \"esm\",\r\n    splitting: true,\r\n    outdir: path.resolve(root, PRE_BUNDLE_DIR),\r\n    plugins: [preBundlePlugin(deps)],\r\n  });\r\n}\r\n","import path from \"path\";\r\n\r\nexport const EXTERNAL_TYPES = [\r\n  \"css\",\r\n  \"less\",\r\n  \"sass\",\r\n  \"scss\",\r\n  \"styl\",\r\n  \"stylus\",\r\n  \"pcss\",\r\n  \"postcss\",\r\n  \"vue\",\r\n  \"svelte\",\r\n  \"marko\",\r\n  \"astro\",\r\n  \"png\",\r\n  \"jpe?g\",\r\n  \"gif\",\r\n  \"svg\",\r\n  \"ico\",\r\n  \"webp\",\r\n  \"avif\",\r\n];\r\n\r\nexport const JS_TYPES_RE = /\\.(?:j|t)sx?$|\\.mjs$/;\r\nexport const BARE_IMPORT_RE = /^[\\w@][^:]/;\r\nexport const QEURY_RE = /\\?.*$/s;\r\nexport const HASH_RE = /#.*$/s;\r\n\r\n// È¢ÑÊûÑÂª∫‰∫ßÁâ©ÈªòËÆ§Â≠òÊîæÂú® node_modules ‰∏≠ÁöÑ .m-vite ÁõÆÂΩï‰∏≠\r\nexport const PRE_BUNDLE_DIR = path.join(\"node_modules\", \".m-vite\");\r\nexport const DEFAULT_EXTERSIONS = [\".tsx\", \".ts\", \".jsx\", \"js\"];\r\nexport const HMR_HEADER = \"vite-hmr\";\r\nexport const CLIENT_PUBLIC_PATH = \"/@vite/client\";\r\nexport const HMR_PORT = 24678;\r\n","import { Plugin } from \"esbuild\";\r\nimport { BARE_IMPORT_RE, EXTERNAL_TYPES } from \"../constants\";\r\n\r\nexport function scanPlugin(deps: Set<string>): Plugin {\r\n  return {\r\n    name: \"esbuild:scan-deps\",\r\n    setup(build) {\r\n      // ÂøΩÁï•ÁöÑÊñá‰ª∂Á±ªÂûã\r\n      build.onResolve(\r\n        { filter: new RegExp(`\\\\.(${EXTERNAL_TYPES.join(\"|\")})$`) },\r\n        (resolveInfo) => {\r\n          return {\r\n            path: resolveInfo.path,\r\n            external: true,\r\n          };\r\n        }\r\n      );\r\n      // ËÆ∞ÂΩï‰æùËµñ\r\n      build.onResolve(\r\n        {\r\n          filter: BARE_IMPORT_RE,\r\n        },\r\n        (resolveInfo) => {\r\n          const { path: id } = resolveInfo;\r\n          deps.add(id);\r\n          return {\r\n            path: id,\r\n            external: true,\r\n          };\r\n        }\r\n      );\r\n    },\r\n  };\r\n}\r\n","import { Loader, Plugin } from \"esbuild\";\r\nimport { BARE_IMPORT_RE } from \"../constants\";\r\nimport { init, parse } from \"es-module-lexer\";\r\nimport path from \"path\";\r\nimport resolve from \"resolve\";\r\nimport fs from \"fs-extra\";\r\nimport createDebug from \"debug\";\r\nimport { normalizePath } from \"../utils\";\r\n\r\nconst debug = createDebug(\"dev\");\r\n\r\nexport function preBundlePlugin(deps: Set<string>): Plugin {\r\n  return {\r\n    name: \"esbuild:pre-bundle\",\r\n    setup(build) {\r\n      build.onResolve(\r\n        {\r\n          filter: BARE_IMPORT_RE,\r\n        },\r\n        (resolveInfo) => {\r\n          const { path: id, importer } = resolveInfo;\r\n          const isEntry = !importer;\r\n          // ÂëΩ‰∏≠ÈúÄË¶ÅÈ¢ÑÁºñËØëÁöÑ‰æùËµñ\r\n          if (deps.has(id)) {\r\n            // Ëã•‰∏∫ÂÖ•Âè£ÔºåÂàôÊ†áËÆ∞ dep ÁöÑ namespace\r\n            return isEntry\r\n              ? {\r\n                  path: id,\r\n                  namespace: \"dep\",\r\n                }\r\n              : {\r\n                  // Âõ†‰∏∫Ëµ∞Âà∞ onResolve ‰∫ÜÔºåÊâÄ‰ª•ËøôÈáåÁöÑ path Â∞±ÊòØÁªùÂØπË∑ØÂæÑ‰∫Ü\r\n                  path: resolve.sync(id, { basedir: process.cwd() }),\r\n                };\r\n          }\r\n        }\r\n      );\r\n\r\n      // ÊãøÂà∞Ê†áËÆ∞ÂêéÁöÑ‰æùËµñÔºåÊûÑÈÄ†‰ª£ÁêÜÊ®°ÂùóÔºå‰∫§Áªô esbuild ÊâìÂåÖ\r\n      build.onLoad(\r\n        {\r\n          filter: /.*/,\r\n          namespace: \"dep\",\r\n        },\r\n        async (loadInfo) => {\r\n          await init;\r\n          const id = loadInfo.path;\r\n          const root = process.cwd();\r\n          const entryPath = normalizePath(resolve.sync(id, { basedir: root }));\r\n          const code = await fs.readFile(entryPath, \"utf-8\");\r\n          const [imports, exports] = await parse(code);\r\n          let proxyModule = [];\r\n          // cjs\r\n          if (!imports.length && !exports.length) {\r\n            const res = require(entryPath);\r\n            const specifiers = Object.keys(res);\r\n            proxyModule.push(\r\n              `export { ${specifiers.join(\",\")} } from \"${entryPath}\"`,\r\n              `export default require(\"${entryPath}\")`\r\n            );\r\n          } else {\r\n            if (exports.includes(\"default\")) {\r\n              proxyModule.push(`import d from \"${entryPath}\";export default d`);\r\n            }\r\n            proxyModule.push(`export * from \"${entryPath}\"`);\r\n          }\r\n          debug(\"‰ª£ÁêÜÊ®°ÂùóÂÜÖÂÆπ: %o\", proxyModule.join(\"\\n\"));\r\n          const loader = path.extname(entryPath).slice(1);\r\n          return {\r\n            loader: loader as Loader,\r\n            contents: proxyModule.join(\"\\n\"),\r\n            resolveDir: root,\r\n          };\r\n        }\r\n      );\r\n    },\r\n  };\r\n}\r\n","import {\r\n  CLIENT_PUBLIC_PATH,\r\n  HASH_RE,\r\n  JS_TYPES_RE,\r\n  QEURY_RE,\r\n} from \"./constants\";\r\nimport path from \"path\";\r\nimport os from \"os\";\r\n\r\nconst INTERNAL_LIST = [CLIENT_PUBLIC_PATH, \"/@react-refresh\"];\r\n\r\nexport const cleanUrl = (url: string): string =>\r\n  url.replace(HASH_RE, \"\").replace(QEURY_RE, \"\");\r\n\r\nexport const isCSSRequest = (id: string): boolean =>\r\n  cleanUrl(id).endsWith(\".css\");\r\n\r\n\r\nexport const isJSRequest = (id: string): boolean => {\r\n  id = cleanUrl(id);\r\n  if (JS_TYPES_RE.test(id)) {\r\n    return true;\r\n  }\r\n  if (!path.extname(id) && !id.endsWith(\"/\")) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport function isImportRequest(url: string): boolean {\r\n  return url.endsWith(\"?import\");\r\n}\r\n\r\nexport function isInternalRequest(url: string): boolean {\r\n  return INTERNAL_LIST.includes(url);\r\n}\r\n\r\nexport function removeImportQuery(url: string): string {\r\n  return url.replace(/\\?import$/, \"\");\r\n}\r\n\r\nexport function isPlainObject(obj: any): boolean {\r\n  return Object.prototype.toString.call(obj) === \"[object Object]\";\r\n}\r\n\r\nexport function getShortName(file: string, root: string) {\r\n  return file.startsWith(root + \"/\") ? path.posix.relative(root, file) : file;\r\n}\r\n\r\nexport function slash(p: string): string {\r\n  return p.replace(/\\\\/g, \"/\");\r\n}\r\n\r\nexport function normalizePath(id: string): string {\r\n  return path.posix.normalize(isWindows ? slash(id) : id);\r\n}\r\nexport const isWindows = os.platform() === \"win32\";\r\n","import { NextHandleFunction } from \"connect\";\r\nimport { CLIENT_PUBLIC_PATH } from \"../../constants\";\r\nimport {\r\n  isJSRequest,\r\n  isCSSRequest,\r\n  isImportRequest,\r\n  isInternalRequest,\r\n  cleanUrl,\r\n} from \"../../utils\";\r\nimport { ServerContext } from \"../index\";\r\nimport createDebug from \"debug\";\r\n\r\nconst debug = createDebug(\"dev\");\r\n\r\nexport async function transformRequest(\r\n  url: string,\r\n  serverContext: ServerContext\r\n) {\r\n  const { moduleGraph, pluginContainer } = serverContext;\r\n  url = cleanUrl(url);\r\n  let mod = await moduleGraph.getModuleByUrl(url);\r\n  if (mod && mod.transformResult) {\r\n    return mod.transformResult;\r\n  }\r\n  const resolvedResult = await pluginContainer.resolveId(url);\r\n  let transformResult;\r\n  if (resolvedResult?.id) {\r\n    let code = await pluginContainer.load(resolvedResult.id);\r\n    if (typeof code === \"object\" && code !== null) {\r\n      code = code.code;\r\n    }\r\n    mod = await moduleGraph.ensureEntryFromUrl(url);\r\n    if (code) {\r\n      transformResult = await pluginContainer.transform(\r\n        code as string,\r\n        resolvedResult?.id\r\n      );\r\n    }\r\n  }\r\n  if (mod) {\r\n    mod.transformResult = transformResult;\r\n  }\r\n  return transformResult;\r\n}\r\n\r\nexport function transformMiddleware(\r\n  serverContext: ServerContext\r\n): NextHandleFunction {\r\n  return async (req, res, next) => {\r\n    if (req.method !== \"GET\" || !req.url) {\r\n      return next();\r\n    }\r\n    const url = req.url;\r\n    debug(\"transformMiddleware: %s\", url);\r\n    // transform JS and CSS request\r\n    if (\r\n      isJSRequest(url) ||\r\n      isCSSRequest(url) ||\r\n      // ÈùôÊÄÅËµÑÊ∫êÁöÑ import ËØ∑Ê±ÇÔºåÂ¶Ç import logo from './logo.svg?import';\r\n      isImportRequest(url)\r\n    ) {\r\n      let result = await transformRequest(url, serverContext);\r\n      if (!result) {\r\n        return next();\r\n      }\r\n      if (result && typeof result !== \"string\") {\r\n        result = result.code;\r\n      }\r\n      res.statusCode = 200;\r\n      res.setHeader(\"Content-Type\", \"application/javascript\");\r\n      return res.end(result);\r\n    }\r\n\r\n    next();\r\n  };\r\n}\r\n","import { PartialResolvedId, TransformResult } from \"rollup\";\r\nimport { cleanUrl } from \"./utils\";\r\n\r\nexport class ModuleNode {\r\n  // ËµÑÊ∫êËÆøÈóÆ url\r\n  url: string;\r\n  // ËµÑÊ∫êÁªùÂØπË∑ØÂæÑ\r\n  id: string | null = null;\r\n  importers = new Set<ModuleNode>();\r\n  importedModules = new Set<ModuleNode>();\r\n  transformResult: TransformResult | null = null;\r\n  lastHMRTimestamp = 0;\r\n  constructor(url: string) {\r\n    this.url = url;\r\n  }\r\n}\r\n\r\nexport class ModuleGraph {\r\n  // ËµÑÊ∫ê url Âà∞ ModuleNode ÁöÑÊò†Â∞ÑË°®\r\n  urlToModuleMap = new Map<string, ModuleNode>();\r\n  // ËµÑÊ∫êÁªùÂØπË∑ØÂæÑÂà∞ ModuleNode ÁöÑÊò†Â∞ÑË°®\r\n  idToModuleMap = new Map<string, ModuleNode>();\r\n\r\n  constructor(\r\n    private resolveId: (url: string) => Promise<PartialResolvedId | null>\r\n  ) {}\r\n\r\n  getModuleById(id: string): ModuleNode | undefined {\r\n    return this.idToModuleMap.get(id);\r\n  }\r\n\r\n  async getModuleByUrl(rawUrl: string): Promise<ModuleNode | undefined> {\r\n    const { url } = await this._resolve(rawUrl);\r\n    return this.urlToModuleMap.get(url);\r\n  }\r\n\r\n  async ensureEntryFromUrl(rawUrl: string): Promise<ModuleNode> {\r\n    const { url, resolvedId } = await this._resolve(rawUrl);\r\n    // È¶ñÂÖàÊ£ÄÊü•ÁºìÂ≠ò\r\n    if (this.urlToModuleMap.has(url)) {\r\n      return this.urlToModuleMap.get(url) as ModuleNode;\r\n    }\r\n    // Ëã•Êó†ÁºìÂ≠òÔºåÊõ¥Êñ∞ urlToModuleMap Âíå idToModuleMap\r\n    const mod = new ModuleNode(url);\r\n    mod.id = resolvedId;\r\n    this.urlToModuleMap.set(url, mod);\r\n    this.idToModuleMap.set(resolvedId, mod);\r\n    return mod;\r\n  }\r\n\r\n  async updateModuleInfo(\r\n    mod: ModuleNode,\r\n    importedModules: Set<string | ModuleNode>\r\n  ) {\r\n    const prevImports = mod.importedModules;\r\n    for (const curImports of importedModules) {\r\n      const dep =\r\n        typeof curImports === \"string\"\r\n          ? await this.ensureEntryFromUrl(cleanUrl(curImports))\r\n          : curImports;\r\n      if (dep) {\r\n        mod.importedModules.add(dep);\r\n        dep.importers.add(mod);\r\n      }\r\n    }\r\n    // Ê∏ÖÈô§Â∑≤Áªè‰∏çÂÜçË¢´ÂºïÁî®ÁöÑ‰æùËµñ\r\n    for (const prevImport of prevImports) {\r\n      if (!importedModules.has(prevImport.url)) {\r\n        prevImport.importers.delete(mod);\r\n      }\r\n    }\r\n  }\r\n\r\n  invalidateModule(file: string) {\r\n    const mod = this.idToModuleMap.get(file);\r\n    if (mod) {\r\n      mod.lastHMRTimestamp = Date.now();\r\n      mod.transformResult = null;\r\n      mod.importers.forEach((importer) => {\r\n        this.invalidateModule(importer.id!);\r\n      });\r\n    }\r\n  }\r\n\r\n  private async _resolve(\r\n    url: string\r\n  ): Promise<{ url: string; resolvedId: string }> {\r\n    const resolved = await this.resolveId(url);\r\n    const resolvedId = resolved?.id || url;\r\n    return { url, resolvedId };\r\n  }\r\n}\r\n","import type {\r\n  LoadResult,\r\n  PartialResolvedId,\r\n  SourceDescription,\r\n  PluginContext as RollupPluginContext,\r\n  ResolvedId,\r\n  AcornNode,\r\n  EmitAsset,\r\n  EmitChunk,\r\n  EmitFile,\r\n  GetModuleInfo,\r\n  IsExternal,\r\n  ModuleInfo,\r\n  ModuleOptions,\r\n  PartialNull,\r\n  PluginCache,\r\n  PluginContextMeta,\r\n  RollupError,\r\n  RollupWarning,\r\n} from \"rollup\";\r\nimport { Plugin } from \"./plugin\";\r\n\r\nexport interface PluginContainer {\r\n  resolveId(id: string, importer?: string): Promise<PartialResolvedId | null>;\r\n  load(id: string): Promise<LoadResult | null>;\r\n  transform(code: string, id: string): Promise<SourceDescription | null>;\r\n}\r\n\r\n// Ê®°Êãü Rollup ÁöÑÊèí‰ª∂Êú∫Âà∂\r\nexport const createPluginContainer = (plugins: Plugin[]): PluginContainer => {\r\n  // Êèí‰ª∂‰∏ä‰∏ãÊñáÂØπË±°\r\n  class Context implements RollupPluginContext {\r\n    addWatchFile: (id: string) => void;\r\n    cache: PluginCache;\r\n    emitAsset: EmitAsset;\r\n    emitChunk: EmitChunk;\r\n    emitFile: EmitFile;\r\n    error: (err: RollupError | string, pos?: number | { column: number; line: number; }) => never;\r\n    getAssetFileName: (assetReferenceId: string) => string;\r\n    getChunkFileName: (chunkReferenceId: string) => string;\r\n    getFileName: (fileReferenceId: string) => string;\r\n    getModuleIds: () => IterableIterator<string>;\r\n    getModuleInfo: GetModuleInfo;\r\n    getWatchFiles: () => string[];\r\n    isExternal: IsExternal;\r\n    load: (options: { id: string; resolveDependencies?: boolean; } & Partial<PartialNull<ModuleOptions>>) => Promise<ModuleInfo>;\r\n    moduleIds: IterableIterator<string>;\r\n    parse: (input: string, options?: any) => AcornNode;\r\n    resolveId: (source: string, importer?: string) => Promise<string | null>;\r\n    setAssetSource: (assetReferenceId: string, source: string | Uint8Array) => void;\r\n    warn: (warning: RollupWarning | string, pos?: number | { column: number; line: number; }) => void;\r\n    meta: PluginContextMeta;\r\n    async resolve(id: string, importer?: string) {\r\n      let out = await pluginContainer.resolveId(id, importer);\r\n      if (typeof out === \"string\") out = { id: out };\r\n      return out as ResolvedId | null;\r\n    }\r\n  }\r\n  // Êèí‰ª∂ÂÆπÂô®\r\n  const pluginContainer: PluginContainer = {\r\n    async resolveId(id: string, importer?: string) {\r\n      const ctx = new Context() as any;\r\n      for (const plugin of plugins) {\r\n        if (plugin.resolveId) {\r\n          const newId = await plugin.resolveId.call(ctx as any, id, importer);\r\n          if (newId) {\r\n            id = typeof newId === \"string\" ? newId : newId.id;\r\n            return { id };\r\n          }\r\n        }\r\n      }\r\n      return null;\r\n    },\r\n    async load(id) {\r\n      const ctx = new Context() as any;\r\n      for (const plugin of plugins) {\r\n        if (plugin.load) {\r\n          const result = await plugin.load.call(ctx, id);\r\n          if (result) {\r\n            return result;\r\n          }\r\n        }\r\n      }\r\n      return null;\r\n    },\r\n    async transform(code, id) {\r\n      const ctx = new Context() as any;\r\n      for (const plugin of plugins) {\r\n        if (plugin.transform) {\r\n          const result = await plugin.transform.call(ctx, code, id);\r\n          if (!result) continue;\r\n          if (typeof result === \"string\") {\r\n            code = result;\r\n          } else if (result.code) {\r\n            code = result.code;\r\n          }\r\n        }\r\n      }\r\n      return { code };\r\n    },\r\n  };\r\n\r\n  return pluginContainer;\r\n};\r\n","import { readFile } from \"fs-extra\";\r\nimport { Plugin } from \"../plugin\";\r\nimport { isJSRequest } from \"../utils\";\r\nimport esbuild from \"esbuild\";\r\nimport path from \"path\";\r\n\r\nexport function esbuildTransformPlugin(): Plugin {\r\n  return {\r\n    name: \"m-vite:esbuild-transform\",\r\n    async load(id) {\r\n      if (isJSRequest(id)) {\r\n        try {\r\n          const code = await readFile(id, \"utf-8\");\r\n          return code;\r\n        } catch (e) {\r\n          return null;\r\n        }\r\n      }\r\n    },\r\n    async transform(code, id) {\r\n      if (isJSRequest(id)) {\r\n        const extname = path.extname(id).slice(1);\r\n        const { code: transformedCode, map } = await esbuild.transform(code, {\r\n          target: \"esnext\",\r\n          format: \"esm\",\r\n          sourcemap: true,\r\n          loader: extname as \"js\" | \"ts\" | \"jsx\" | \"tsx\",\r\n        });\r\n        return {\r\n          code: transformedCode,\r\n          map,\r\n        };\r\n      }\r\n      return null;\r\n    },\r\n  };\r\n}\r\n","import resolve from \"resolve\";\r\nimport { Plugin } from \"../plugin\";\r\nimport { ServerContext } from \"../server/index\";\r\nimport path from \"path\";\r\nimport { pathExists } from \"fs-extra\";\r\nimport { DEFAULT_EXTERSIONS } from \"../constants\";\r\nimport { removeImportQuery, cleanUrl, isInternalRequest, normalizePath, isWindows } from \"../utils\";\r\n\r\nexport function resolvePlugin(): Plugin {\r\n  let serverContext: ServerContext;\r\n  return {\r\n    name: \"m-vite:resolve\",\r\n    configureServer(s) {\r\n      serverContext = s;\r\n    },\r\n    async resolveId(id: string, importer?: string) {\r\n      id = removeImportQuery(cleanUrl(id));\r\n      if (isInternalRequest(id)) {\r\n        return null;\r\n      }\r\n      if (path.isAbsolute(id)) {\r\n        if (await pathExists(id)) {\r\n          return { id };\r\n        }\r\n        // Âä†‰∏ä root Ë∑ØÂæÑÂâçÁºÄÔºåÂ§ÑÁêÜ /src/main.tsx ÁöÑÊÉÖÂÜµ\r\n        id = path.join(serverContext.root, id);\r\n        if (await pathExists(id)) {\r\n          return { id };\r\n        }\r\n      } else if (id.startsWith(\".\")) {\r\n        if (!importer) {\r\n          throw new Error(\"`importer` should not be undefined\");\r\n        }\r\n        const hasExtension = path.extname(id).length > 1;\r\n        let resolvedId: string;\r\n        // ./App.tsx\r\n        if (hasExtension) {\r\n          resolvedId = normalizePath(resolve.sync(id, { basedir: path.dirname(importer) }));\r\n          if (await pathExists(resolvedId)) {\r\n            return { id: resolvedId };\r\n          }\r\n        } else {\r\n          // ./App -> ./App.tsx\r\n          for (const extname of DEFAULT_EXTERSIONS) {\r\n            try {\r\n              const withExtension = `${id}${extname}`;\r\n              resolvedId = normalizePath(resolve.sync(withExtension, {\r\n                basedir: path.dirname(importer),\r\n              }));\r\n              if (await pathExists(resolvedId)) {\r\n                return { id: resolvedId };\r\n              }\r\n            } catch (e) {\r\n              continue;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return null;\r\n    },\r\n  };\r\n}\r\n","import { init, parse } from \"es-module-lexer\";\r\nimport {\r\n  BARE_IMPORT_RE,\r\n  CLIENT_PUBLIC_PATH,\r\n  PRE_BUNDLE_DIR,\r\n} from \"../constants\";\r\nimport {\r\n  cleanUrl,\r\n  getShortName,\r\n  isInternalRequest,\r\n  isJSRequest,\r\n  isWindows,\r\n  normalizePath,\r\n} from \"../utils\";\r\nimport MagicString from \"magic-string\";\r\nimport path from \"path\";\r\nimport { Plugin } from \"../plugin\";\r\nimport { ServerContext } from \"../server/index\";\r\n\r\nexport function importAnalysisPlugin(): Plugin {\r\n  let serverContext: ServerContext;\r\n  return {\r\n    name: \"m-vite:import-analysis\",\r\n    configureServer(s) {\r\n      serverContext = s;\r\n    },\r\n    async transform(code: string, id: string) {\r\n      if (!isJSRequest(id) || isInternalRequest(id)) {\r\n        return null;\r\n      }\r\n      await init;\r\n      const importedModules = new Set<string>();\r\n      const [imports] = parse(code);\r\n      const ms = new MagicString(code);\r\n      const resolve = async (id: string, importer?: string) => {\r\n        const resolved = await serverContext.pluginContainer.resolveId(\r\n          id,\r\n          normalizePath(importer)\r\n        );\r\n        if (!resolved) {\r\n          return;\r\n        }\r\n        const cleanedId = cleanUrl(resolved.id);\r\n        const mod = moduleGraph.getModuleById(cleanedId);\r\n        let resolvedId = `/${getShortName(resolved.id, serverContext.root)}`;\r\n        if (mod && mod.lastHMRTimestamp > 0) {\r\n          // resolvedId += \"?t=\" + mod.lastHMRTimestamp;\r\n        }\r\n        return resolvedId;\r\n      };\r\n      const { moduleGraph } = serverContext;\r\n      const curMod = moduleGraph.getModuleById(id)!;\r\n\r\n      for (const importInfo of imports) {\r\n        const { s: modStart, e: modEnd, n: modSource } = importInfo;\r\n        if (!modSource || isInternalRequest(modSource)) continue;\r\n        // ÈùôÊÄÅËµÑÊ∫ê\r\n        if (modSource.endsWith(\".svg\")) {\r\n          // Âä†‰∏ä ?import ÂêéÁºÄ\r\n          const resolvedUrl = await resolve(modSource, id);\r\n          ms.overwrite(modStart, modEnd, `${resolvedUrl}?import`);\r\n          continue;\r\n        }\r\n        // Á¨¨‰∏âÊñπÂ∫ì: Ë∑ØÂæÑÈáçÂÜôÂà∞È¢ÑÊûÑÂª∫‰∫ßÁâ©ÁöÑË∑ØÂæÑ\r\n        if (BARE_IMPORT_RE.test(modSource)) {\r\n          const bundlePath = normalizePath(\r\n            path.join('/', PRE_BUNDLE_DIR, `${modSource}.js`)\r\n          );\r\n          ms.overwrite(modStart, modEnd, bundlePath);\r\n          importedModules.add(bundlePath);\r\n        } else if (modSource.startsWith(\".\") || modSource.startsWith(\"/\")) {\r\n          const resolved = await resolve(modSource, id);\r\n          if (resolved) {\r\n            ms.overwrite(modStart, modEnd, resolved);\r\n            importedModules.add(resolved);\r\n          }\r\n        }\r\n      }\r\n      // Âè™ÂØπ‰∏öÂä°Ê∫êÁ†ÅÊ≥®ÂÖ•\r\n      if (!id.includes(\"node_modules\")) {\r\n        // Ê≥®ÂÖ• HMR Áõ∏ÂÖ≥ÁöÑÂ∑•ÂÖ∑ÂáΩÊï∞\r\n        ms.prepend(\r\n          `import { createHotContext as __vite__createHotContext } from \"${CLIENT_PUBLIC_PATH}\";` +\r\n            `import.meta.hot = __vite__createHotContext(${JSON.stringify(\r\n              cleanUrl(curMod.url)\r\n            )});`\r\n        );\r\n      }\r\n\r\n      moduleGraph.updateModuleInfo(curMod, importedModules);\r\n\r\n      return {\r\n        code: ms.toString(),\r\n        map: ms.generateMap(),\r\n      };\r\n    },\r\n  };\r\n}\r\n","import { readFile } from \"fs-extra\";\r\nimport { CLIENT_PUBLIC_PATH } from \"../constants\";\r\nimport { Plugin } from \"../plugin\";\r\nimport { ServerContext } from \"../server\";\r\nimport { getShortName } from \"../utils\";\r\n\r\nexport function cssPlugin(): Plugin {\r\n  let serverContext: ServerContext;\r\n  return {\r\n    name: \"m-vite:css\",\r\n    configureServer(s) {\r\n      serverContext = s;\r\n    },\r\n    load(id) {\r\n      if (id.endsWith(\".css\")) {\r\n        return readFile(id, \"utf-8\");\r\n      }\r\n    },\r\n    async transform(code, id) {\r\n      if (id.endsWith(\".css\")) {\r\n        // ÂåÖË£ÖÊàê JS Ê®°Âùó\r\n        const jsContent = `\r\nimport { createHotContext as __vite__createHotContext } from \"${CLIENT_PUBLIC_PATH}\";\r\nimport.meta.hot = __vite__createHotContext(\"/${getShortName(\r\n          id,\r\n          serverContext.root\r\n        )}\");\r\nimport { updateStyle, removeStyle } from \"${CLIENT_PUBLIC_PATH}\"\r\n  \r\nconst id = '${id}';\r\nconst css = \\`${code.replace(/\\n/g, \"\")}\\`;\r\n\r\nupdateStyle(id, css);\r\nimport.meta.hot.accept();\r\nexport default css;\r\nimport.meta.hot.prune(() => removeStyle(id));`.trim();\r\n        return {\r\n          code: jsContent,\r\n        };\r\n      }\r\n      return null;\r\n    },\r\n  };\r\n}\r\n","import { pathExists, readFile } from \"fs-extra\";\r\nimport { Plugin } from \"../plugin\";\r\nimport { ServerContext } from \"../server\";\r\nimport { cleanUrl, getShortName, normalizePath, removeImportQuery } from \"../utils\";\r\n\r\nexport function assetPlugin(): Plugin {\r\n  let serverContext: ServerContext;\r\n\r\n  return {\r\n    name: \"m-vite:asset\",\r\n    configureServer(s) {\r\n      serverContext = s;\r\n    },\r\n    async load(id) {\r\n      const cleanedId = removeImportQuery(cleanUrl(id));\r\n      const resolvedId = `/${getShortName(normalizePath(id), serverContext.root)}`;\r\n\r\n      // ËøôÈáå‰ªÖÂ§ÑÁêÜ svg\r\n      if (cleanedId.endsWith(\".svg\")) {\r\n        return {\r\n          code: `export default \"${resolvedId}\"`,\r\n        };\r\n      }\r\n    },\r\n  };\r\n}\r\n","import { CLIENT_PUBLIC_PATH, HMR_PORT } from \"../constants\";\r\nimport { Plugin } from \"../plugin\";\r\nimport fs from \"fs-extra\";\r\nimport path from \"path\";\r\nimport { ServerContext } from \"../server/index\";\r\n\r\nexport function clientInjectPlugin(): Plugin {\r\n  let serverContext: ServerContext;\r\n  return {\r\n    name: \"m-vite:client-inject\",\r\n    configureServer(s) {\r\n      serverContext = s;\r\n    },\r\n    resolveId(id) {\r\n      if (id === CLIENT_PUBLIC_PATH) {\r\n        return { id };\r\n      }\r\n      return null;\r\n    },\r\n    async load(id) {\r\n      if (id === CLIENT_PUBLIC_PATH) {\r\n        const realPath = path.join(\r\n          serverContext.root,\r\n          \"node_modules\",\r\n          \"mini-vite\",\r\n          \"dist\",\r\n          \"client.mjs\"\r\n        );\r\n        const code = await fs.readFile(realPath, \"utf-8\");\r\n        return {\r\n          code: code.replace(\"__HMR_PORT__\", JSON.stringify(HMR_PORT)),\r\n        };\r\n      }\r\n    },\r\n    transformIndexHtml(raw) {\r\n      return raw.replace(\r\n        /(<head[^>]*>)/i,\r\n        `$1<script type=\"module\" src=\"${CLIENT_PUBLIC_PATH}\"></script>`\r\n      );\r\n    },\r\n  };\r\n}\r\n","import { Plugin } from \"../plugin\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport { isJSRequest } from \"../utils\";\r\nimport { transformAsync } from \"@babel/core\";\r\n\r\nfunction loadPlugin(path: string): Promise<any> {\r\n  return import(path).then((module) => module.default || module);\r\n}\r\n\r\nconst RUNTIME_PUBLIC_PATH = \"/@react-refresh\";\r\n\r\nconst runtimeFilePath = path.resolve(\r\n  __dirname,\r\n  \"..\",\r\n  \"node_modules\",\r\n  \"react-refresh/cjs/react-refresh-runtime.development.js\"\r\n);\r\n\r\n// react refresh ÁöÑÂÖ∑‰ΩìÂÜÖÂÆπ\r\nexport const runtimeCode = `\r\nconst exports = {}\r\n${fs.readFileSync(runtimeFilePath, \"utf-8\")}\r\nfunction debounce(fn, delay) {\r\n  let handle\r\n  return () => {\r\n    clearTimeout(handle)\r\n    handle = setTimeout(fn, delay)\r\n  }\r\n}\r\nexports.performReactRefresh = debounce(exports.performReactRefresh, 16)\r\nexport default exports\r\n`;\r\n\r\n// ÈúÄË¶ÅÊ≥®ÂÖ•ÁöÑÂÖ®Â±Ä‰ª£Á†Å\r\nexport const preambleCode = `\r\nimport RefreshRuntime from \"${RUNTIME_PUBLIC_PATH}\"\r\nRefreshRuntime.injectIntoGlobalHook(window)\r\nwindow.$RefreshReg$ = () => {}\r\nwindow.$RefreshSig$ = () => (type) => type\r\nwindow.__vite_plugin_react_preamble_installed__ = true\r\n`;\r\n\r\nconst header = `\r\nimport RefreshRuntime from \"${RUNTIME_PUBLIC_PATH}\";\r\n\r\nlet prevRefreshReg;\r\nlet prevRefreshSig;\r\n\r\nif (import.meta.hot) {\r\n  prevRefreshReg = window.$RefreshReg$;\r\n  prevRefreshSig = window.$RefreshSig$;\r\n  window.$RefreshReg$ = (type, id) => {\r\n    RefreshRuntime.register(type, __SOURCE__ + \" \" + id)\r\n  };\r\n  window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;\r\n}`.replace(/[\\n]+/gm, \"\");\r\n\r\nconst footer = `\r\nif (import.meta.hot) {\r\n  window.$RefreshReg$ = prevRefreshReg;\r\n  window.$RefreshSig$ = prevRefreshSig;\r\n  import.meta.hot.accept();\r\n  if (!window.__vite_plugin_react_timeout) {\r\n    window.__vite_plugin_react_timeout = setTimeout(() => {\r\n      window.__vite_plugin_react_timeout = 0;\r\n      RefreshRuntime.performReactRefresh();\r\n    }, 30);\r\n  }\r\n}`;\r\n\r\nexport function reactHMRPlugin(): Plugin {\r\n  return {\r\n    name: \"m-vite:react-refresh\",\r\n    resolveId(id) {\r\n      if (id === RUNTIME_PUBLIC_PATH) {\r\n        return { id };\r\n      }\r\n      return null;\r\n    },\r\n    async load(id) {\r\n      if (id === RUNTIME_PUBLIC_PATH) {\r\n        return runtimeCode.replace(\r\n          \"process.env.NODE_ENV\",\r\n          JSON.stringify(\"development\")\r\n        );\r\n      }\r\n    },\r\n    async transform(code, id) {\r\n      if (isJSRequest(id) && !id.includes(\"node_modules\")) {\r\n        const reactRefreshPlugin = await loadPlugin(\"react-refresh/babel\");\r\n        const transformedCode = await transformAsync(code, {\r\n          plugins: [reactRefreshPlugin],\r\n        });\r\n        return {\r\n          code:\r\n            header.replace(\"__SOURCE__\", JSON.stringify(id)) +\r\n            transformedCode!.code +\r\n            footer,\r\n        };\r\n      }\r\n      return null;\r\n    },\r\n    transformIndexHtml(raw) {\r\n      return raw.replace(\r\n        /(<head[^>]*>)/i,\r\n        `$1<script type=\"module\">${preambleCode}</script>`\r\n      );\r\n    },\r\n  };\r\n}\r\n","import { esbuildTransformPlugin } from \"./esbuild\";\r\nimport { resolvePlugin } from \"./resolve\";\r\nimport { importAnalysisPlugin } from \"./importAnalysis\";\r\nimport { Plugin } from \"../plugin\";\r\nimport { cssPlugin } from \"./css\";\r\nimport { assetPlugin } from \"./assets\";\r\nimport { clientInjectPlugin } from \"./clientInject\";\r\nimport { reactHMRPlugin } from \"./react-hmr\";\r\n\r\nexport function resolvePlugins(): Plugin[] {\r\n  return [\r\n    clientInjectPlugin(),\r\n    resolvePlugin(),\r\n    esbuildTransformPlugin(),\r\n    reactHMRPlugin(),\r\n    importAnalysisPlugin(),\r\n    cssPlugin(),\r\n    assetPlugin(),\r\n  ];\r\n}\r\n","import { NextHandleFunction } from \"connect\";\r\nimport { ServerContext } from \"../index\";\r\nimport path from \"path\";\r\nimport { pathExists, readFile } from \"fs-extra\";\r\n\r\nexport function indexHtmlMiddware(\r\n  serverContext: ServerContext\r\n): NextHandleFunction {\r\n  return async (req, res, next) => {\r\n    if (req.url === \"/\") {\r\n      const { root } = serverContext;\r\n      const indexHtmlPath = path.join(root, \"index.html\");\r\n      if (await pathExists(indexHtmlPath)) {\r\n        const rawHtml = await readFile(indexHtmlPath, \"utf8\");\r\n        let html = rawHtml;\r\n        for (const plugin of serverContext.plugins) {\r\n          if (plugin.transformIndexHtml) {\r\n            html = await plugin.transformIndexHtml(html);\r\n          }\r\n        }\r\n\r\n        res.statusCode = 200;\r\n        res.setHeader(\"Content-Type\", \"text/html\");\r\n        return res.end(html);\r\n      }\r\n    }\r\n    return next();\r\n  };\r\n}\r\n","import { NextHandleFunction } from \"connect\";\r\nimport { CLIENT_PUBLIC_PATH } from \"../../constants\";\r\nimport { isImportRequest } from \"../../utils\";\r\nimport sirv from \"sirv\";\r\n\r\nexport function staticMiddleware(root: string): NextHandleFunction {\r\n  const serveFromRoot = sirv(root, { dev: true });\r\n  return async (req, res, next) => {\r\n    if (!req.url) {\r\n      return;\r\n    }\r\n    if (isImportRequest(req.url) || req.url === CLIENT_PUBLIC_PATH) {\r\n      return;\r\n    }\r\n    serveFromRoot(req, res, next);\r\n  };\r\n}\r\n","import connect from \"connect\";\r\nimport { red } from \"picocolors\";\r\nimport { WebSocketServer, WebSocket } from \"ws\";\r\nimport { HMR_PORT } from \"./constants\";\r\n\r\nexport function createWebSocketServer(server: connect.Server): {\r\n  send: (msg: string) => void;\r\n  close: () => void;\r\n} {\r\n  let wss: WebSocketServer;\r\n  wss = new WebSocketServer({ port: HMR_PORT });\r\n  wss.on(\"connection\", (socket) => {\r\n    socket.send(JSON.stringify({ type: \"connected\" }));\r\n  });\r\n\r\n  wss.on(\"error\", (e: Error & { code: string }) => {\r\n    if (e.code !== \"EADDRINUSE\") {\r\n      console.error(red(`WebSocket server error:\\n${e.stack || e.message}`));\r\n    }\r\n  });\r\n\r\n  return {\r\n    send(payload: Object) {\r\n      const stringified = JSON.stringify(payload);\r\n      wss.clients.forEach((client) => {\r\n        if (client.readyState === WebSocket.OPEN) {\r\n          client.send(stringified);\r\n        }\r\n      });\r\n    },\r\n\r\n    close() {\r\n      wss.close();\r\n    },\r\n  };\r\n}\r\n","import { ServerContext } from \"./server/index\";\r\nimport { blue, green } from \"picocolors\";\r\nimport { getShortName } from \"./utils\";\r\n\r\nexport function bindingHMREvents(serverContext: ServerContext) {\r\n  const { watcher, ws, root } = serverContext;\r\n\r\n  watcher.on(\"change\", async (file) => {\r\n    console.log(`‚ú®${blue(\"[hmr]\")} ${green(file)} changed`);\r\n    const { moduleGraph } = serverContext;\r\n    await moduleGraph.invalidateModule(file);\r\n    ws.send({\r\n      type: \"update\",\r\n      updates: [\r\n        {\r\n          type: \"js-update\",\r\n          timestamp: Date.now(),\r\n          path: \"/\" + getShortName(file, root),\r\n          acceptedPath: \"/\" + getShortName(file, root),\r\n        },\r\n      ],\r\n    });\r\n  });\r\n}\r\n"],"mappings":"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","names":["path","path","build","path","path","path","build","path","path","blue","green","createDebug","debug","path","resolve","path","path","resolve","init","parse","path","init","parse","resolve","id","readFile","readFile","fs","path","fs","path","path","fs","path","pathExists","readFile","green","green","green","blue"]}